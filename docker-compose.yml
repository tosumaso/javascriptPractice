version: '3.2' #docker-composeのバージョン
services: #各コンテナの設定を書き始めるための宣言
 mysql-standalone: #イメージを元に作成されるサービス名
  image: mysql:5.7 #使うイメージ名:タグ(ローカルにイメージがないならDockerHubから自動でダウンロードされ、この名前がイメージ名として保存される)
  environment: #サービス内で使われる環境変数
   MYSQL_ROOT_PASSWORD: password
   MYSQL_PASSWORD: training
   MYSQL_USER: training_user
   MYSQL_DATABASE: trainings
  ports: #連結するポート番号 ホストOSのポート:コンテナのポート
   - "3306:3306"
  volumes: #HostOSにあるDBのデータをコンテナから参照できる(バインドマウント)
   - mysql-data:/var/lib/mysql #HostOSのデータ保存場所:コンテナ内の保存場所
   - ./my.cnf:/etc/mysql/conf.d/my.cnf #HostOSにあるmysqlの設定ファイル(my.cnf):コンテナ内の設定ファイル保存場所
 springboot-docker-container:
  image: springboot-docker-container #./dockerfileで作成したイメージ名を設定(buildでdockerfileのイメージを参照しているため、imageによるイメージのpullは行われない)
  ports:
   - "8888:8888"
  environment: #application.propertiesに指定したDBの情報を記載(ホスト名をlocalhostからDBのコンテナ名に変更する)
   SPRING_DATASOURCE_URL: jdbc:mysql://mysql-standalone:3306/trainings?character_set_server=utf8mb4
   SPRING_DATASOURCE_USERNAME: "training_user"
   SPRING_DATASOURCE_PASSWORD: "training"
  build: #dockerfileからイメージを取得する場合
   context: "./" #dockerfileの相対パス
   dockerfile: "Dockerfile" #参照するdockerfile名
  depends_on: #他のコンテナとの依存関係を明記、depends_onに指定したコンテナ(mysql)が起動してからdepends_onを持つコンテナ(springboot-docker-container)を起動
    - mysql-standalone
    
volumes: #トップレベルのvolumes:ホストDockerの保存領域にデータを保存してデータの永続化する
 mysql-data: #HostOS側にあるデータの場所(バインドマウントで指定した場所)
  external: # true: ボリュームがあれば別のプロジェクト間でも同じデータを参照できる. false: プロジェクト毎にボリュームを定義する場合
   name: project-mysql
    
    #1 インデントはスペースでやる。docker-compose.ymlは各要素の配置が重要
    #2 設定の配下の"-"は配列を意味する
    